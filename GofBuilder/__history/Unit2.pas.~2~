{
A funcionalidade usada no VCL do Delphi para criar formulários e componentes é
semelhante em conceitos ao construtor.
O Delphi cria formulários usando uma interface comum, por "Application.CreateForm"
meio do TForm constutor de classes.
O TForm implementa um construtor comun usando as informações de recursos (arquivo DFM)
para instanciar os componentes pertencentes ao formulário.
Muitas classes descendentes reutilizam esse mesmo processo de construção para criar
diferentes representações.
O Delphi também facilita as extensões do desenvolvedor.
No evento de OnCreate do TForm também adiciona um gancho ao processo do construtor
para tornar a funcionalidade facil de estender.
}

unit Unit2;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls;


{
No nosso exemplo iremos incluir uma classe TAbstractFormBuilder e duas classes
concretas TRedFormBuilder e TBlueFormBuilder.
Para facilitar o desenvolvimento, algumas funcionalidades comuns das classes concretas
foram movidas para TAbastractFormBuilder.
}
type
  TAbstractFormBuilder = class
  private
    FForm: TForm;
    procedure BuilderFormClose(Sender: TObject; var Action: TCloseAction);
  protected
    function GetForm: TForm; virtual;
  public
    procedure CreateForm(AOwner: TComponent); virtual;
    procedure CreateSpeedButton; virtual; abstract;
    procedure CreateEdit; virtual; abstract;
    procedure CreateLabel; virtual; abstract;
    property Form: TForm read GetForm;
  end;

  TRedFormBuilder = class(TAbstractFormBuilder)
  private
    FNextLeft, FNextTop: Integer;
  public
    procedure CreateForm(AOwner: TComponent); override;
    procedure CreateSpeedButton; override;
    procedure CreateEdit; override;
    procedure CreateLabel; override;
  end;

  TBlueFormBuilder = class(TAbstractFormBuilder)
  private
    FNextLeft, FNextTop: Integer;
  public
    procedure CreateForm(AOwner: TComponent); override;
    procedure CreateSpeedButton; override;
    procedure CreateEdit; override;
    procedure CreateLabel; override;
  end;


{
Em tempo de execução, o aplicativo client instrui uma das classe concretas a criar
os componentes usando os procedimentos de criação publicos.
}
  TForm2 = class(TForm)
    Button1: TButton;
    procedure FormCreate(Sender: TObject);
  private
    { Private declarations }
  public
    procedure Create3ComponentFormusingBuilder(aBuilder: TAbstractFormBuilder);
  end;

var
  Form2: TForm2;

implementation

{$R *.dfm}

{ TForm2 }

procedure TForm2.Create3ComponentFormusingBuilder(
  aBuilder: TAbstractFormBuilder);
var
  NewForm: TForm;
begin
  with ABuilder do begin
    CreateForm(Application);
    CreateEdit;
    CreateSpeedButton;
    CreateLabel;
    NewForm := Form;
    if NewForm <> nil then NewForm.Show;
  end;
end;

{ TAbstractFormBuilder }

procedure TAbstractFormBuilder.BuilderFormClose(Sender: TObject;
  var Action: TCloseAction);
begin

end;

procedure TAbstractFormBuilder.CreateForm(AOwner: TComponent);
begin

end;

function TAbstractFormBuilder.GetForm: TForm;
begin

end;

{ TRedFormBuilder }

procedure TRedFormBuilder.CreateEdit;
begin

end;

procedure TRedFormBuilder.CreateForm(AOwner: TComponent);
begin
  inherited;

end;

procedure TRedFormBuilder.CreateLabel;
begin

end;

procedure TRedFormBuilder.CreateSpeedButton;
begin

end;

{ TBlueFormBuilder }

procedure TBlueFormBuilder.CreateEdit;
begin

end;

procedure TBlueFormBuilder.CreateForm(AOwner: TComponent);
begin
  inherited;

end;

procedure TBlueFormBuilder.CreateLabel;
begin

end;

procedure TBlueFormBuilder.CreateSpeedButton;
begin

end;

end.
